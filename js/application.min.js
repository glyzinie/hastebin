class HasteDocument {
    constructor() {
        this.locked = false;
    }

    htmlEscape(text) {
        return text.replace(/&/g, "&amp;")
                   .replace(/>/g, "&gt;")
                   .replace(/</g, "&lt;")
                   .replace(/"/g, "&quot;");
    }

    load(id, callback, type) {
        $.ajax({
            url: `/documents/${id}`,
            type: 'GET',
            dataType: 'json',
            success: (response) => {
                const content = response.content || response.data || "Unknown issue while trying to get the contents of the haste.";
                this.locked = true;
                this.key = id;
                this.data = content;

                try {
                    let highlight = type ? hljs.highlight(type, content) : hljs.highlightAuto(content);
                    callback({ value: highlight.value, key: id, language: highlight.language || type, lineCount: content.split("\n").length });
                } catch (error) {
                    callback({ value: hljs.highlightAuto(content).value });
                }
            },
            error: () => {
                callback(false);
            }
        });
    }

    save(data, callback) {
        if (this.locked) return false;
        this.data = data;

        $.ajax({
            url: '/documents',
            type: 'POST',
            data,
            dataType: 'json',
            contentType: 'text/plain; charset=utf-8',
            success: (response) => {
                if (response.status === false) {
                    callback({ message: response.message || "Unauthorized." });
                    return;
                }

                this.locked = true;
                this.key = response.key;
                const highlight = hljs.highlightAuto(data);
                callback(null, { value: highlight.value, key: response.key, language: highlight.language, lineCount: data.split("\n").length });
            },
            error: (xhr) => {
                try {
                    callback(JSON.parse(xhr.responseText));
                } catch (error) {
                    callback({ message: "Something went wrong!" });
                }
            }
        });
    }
}

class Haste {
    constructor(appName, options) {
        this.appName = appName;
        this.options = options;
        this.initializeUIElements();
        this.configureShortcuts();
        this.configureButtons();
    }

    initializeUIElements() {
        this.$textarea = $("textarea");
        this.$box = $("#box");
        this.$code = $("#box code");
        this.$linenos = $("#linenos");
    }

    setTitle(title = "") {
        // Set the document title
    }

    showMessage(message, type = "info") {
        const $message = $(`<li class="${type}">${message}</li>`);
        $("#messages").prepend($message);
        setTimeout(() => $message.slideUp("fast", () => $message.remove()), 3000);
    }

    lightKey() {
        this.configureKey(["new", "save"]);
    }

    fullKey() {
        this.configureKey(["new", "duplicate"]);
    }

    configureKey(actions) {
        $("#box2 .function").each(function() {
            const $button = $(this);
            const isEnabled = actions.some(action => $button.hasClass(action));
            $button.toggleClass("enabled", isEnabled);
        });
    }

    newDocument(isNew = true) {
        this.$box.hide();
        this.doc = new HasteDocument();
        if (isNew) window.history.pushState(null, this.appName, "/");
        this.setTitle();
        this.lightKey();
        this.$textarea.val("").show().focus();
        this.removeLineNumbers();
    }

    loadDocument(filename) {
        const [id, ext] = filename.split(".", 2);
        this.doc = new HasteDocument();
        this.doc.load(id, (result) => {
            if (result) {
                this.$code.html(result.value);
                this.setTitle(result.key);
                this.fullKey();
                this.$textarea.hide();
                this.$box.show().focus();
                this.addLineNumbers(result.lineCount);
            } else {
                this.newDocument();
            }
        }, this.lookupTypeByExtension(ext));
    }

    duplicateDocument() {
        if (this.doc.locked) {
            const data = this.doc.data;
            this.newDocument();
            this.$textarea.val(data);
        }
    }

    lockDocument() {
        this.doc.save(this.$textarea.val(), (error, result) => {
            if (error) {
                this.showMessage(error.message, "error");
            } else if (result) {
                this.$code.html(result.value);
                this.setTitle(result.key);
                let newURL = `/${result.key}`;
                if (result.language) newURL += `.${this.lookupExtensionByType(result.language)}`;
                window.history.pushState(null, `${this.appName}-${result.key}`, newURL);
                this.fullKey();
                this.$textarea.hide();
                this.$box.show().focus();
                this.addLineNumbers(result.lineCount);
            }
        });
    }

    configureButtons() {
        this.buttons = [
            {
                element: $("#box2 .save"),
                label: "Save",
                shortcutDescription: "control + s",
                shortcut: event => event.ctrlKey && event.keyCode === 83,
                action: () => {
                    if (this.$textarea.val().trim() !== "") {
                        this.lockDocument();
                    }
                }
            },
            {
                element: $("#box2 .new"),
                label: "New",
                shortcutDescription: "control + n",
                shortcut: event => event.ctrlKey && event.keyCode === 78,
                action: () => {
                    this.newDocument(!this.doc.key);
                }
            },
            {
                element: $("#box2 .duplicate"),
                label: "Duplicate & Edit",
                shortcutDescription: "control + d",
                shortcut: event => this.doc.locked && event.ctrlKey && event.keyCode === 68,
                action: () => {
                    this.duplicateDocument();
                }
            }
        ];
        this.buttons.forEach(button => this.configureButton(button));
    }

    configureButton(button) {
        button.element.click(event => {
            event.preventDefault();
            if (!button.element.hasClass('disabled') && button.element.hasClass('enabled')) {
                button.action();
            }
        });

        button.element.mouseenter(() => {
            $("#box3 .label").text(button.label);
            $("#box3 .shortcut").text(button.shortcutDescription || "");
            $("#box3").show();
            button.element.append($("#pointer").remove().show());
        });

        button.element.mouseleave(() => {
            $("#box3").hide();
            $("#pointer").hide();
        });
    }

    configureShortcuts() {
        $(document.body).keydown(event => {
            this.buttons.forEach(button => {
                if (button.shortcut && button.shortcut(event)) {
                    event.preventDefault();
                    button.action();
                }
            });
        });
    }

    addLineNumbers(lineCount) {
        let lineNumbersHtml = '';
        for (let i = 0; i < lineCount; i++) {
            lineNumbersHtml += `${i + 1}<br/>`;
        }
        this.$linenos.html(lineNumbersHtml);
    }

    removeLineNumbers() {
        this.$linenos.html("");
    }
}

$(function() {
    // Initialize Haste application
    const hasteApp = new Haste('Haste App', {});

    // Add behavior for handling tab insertion in textarea to maintain indentation
    $('textarea').keydown(function(event) {
        if (event.keyCode === 9) { // tab key
            event.preventDefault();
            const start = this.selectionStart;
            const end = this.selectionEnd;

            // Set textarea value to: text before caret + tab + text after caret
            $(this).val($(this).val().substring(0, start) + "    " + $(this).val().substring(end));

            // Put caret at right position again
            this.selectionStart = this.selectionEnd = start + 4; // 4 is the length of the tab
        }
    });
});
